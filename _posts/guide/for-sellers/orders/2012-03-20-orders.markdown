---
layout: guides
title: Managing Orders
categories:
- listing
- manage listings
- orders
- manage questions
- shipping
menu:
- Orders
tags:
- orders
---

<div class="contents">
  <h5>Table of Contents</h5>
  <dl>
    <dt><a href="javascript:void(0)" onClick="goToByScroll('intro')">Introduction</a></dt>
    <dt><a href="javascript:void(0)" onClick="goToByScroll('getorder')">Get an Order</a></dt>
    <dt><a href="javascript:void(0)" onClick="goToByScroll('fields')">Fields</a></dt>
    <dt><a href="javascript:void(0)" onClick="goToByScroll('status')">Order Status</a></dt>
    <dt><a href="javascript:void(0)" onClick="goToByScroll('resources')">Resources</a></dt>
    <dt><a href="javascript:void(0)" onClick="goToByScroll('searchorder')">Searching Orders</a></dt>
  </dl>
</div>


##Introduction {#intro}

An Order is a request for a purchase of a certain Item or a group of Items, placed by a certain Customer. It is defined mainly by its quantity and price parameters, but could also include some other information in order to complete the description of what the customer is buying, often a certain variation on the item (eg: size and color of a pair of shoes).

##Get an Order {#getorder}

To get an order you will need an **access token** and the **order id**, then execute the following GET request:

<pre class="terminal">
https://api.mercadolibre.com/orders/order_id?access_token={...}
</pre>

This is how an Order looks like:

{% highlight javascript %}
{
  "id": 768570754,
  "status": "paid",
  "status_detail": null,
  "date_created": "2013-05-27T10:01:50.000-04:00",
  "date_closed": "2013-05-27T10:04:07.000-04:00",
  "order_items": - [
    - {
      "item": - {
        "id": "MLB12345678",
        "title": "Samsung Galaxy",
        "variation_id": null,
        "variation_attributes": [
        ],
      },
      "quantity": 1,
      "unit_price": 499,
      "currency_id": "BRL",
    },
  ],
  "total_amount": 499,
  "currency_id": "BRL",
  "buyer": - {
    "id": "123456789",
    "nickname": "COMPRADORTESTE",
    "email": "b@b.com",
    "phone": - {
      "area_code": "11",
      "number": "12345678",
      "extension": null,
    },
    "first_name": "Comprador de testes",
    "last_name": "da Silva",
    "billing_info": - {
      "doc_type": "CPF",
      "doc_number": "12345678910",
    },
  },
  "seller": - {
    "id": "123456789",
    "nickname": "VENDEDORTESTES",
    "email": "a@a.com",
    "phone": - {
      "area_code": null,
      "number": "11 12345678",
      "extension": "11",
    },
    "first_name": "Vendedor de Testes",
    "last_name": "testes de documentacao",
  },
  "payments": - [
    - {
      "id": "596707837",
      "transaction_amount": 499,
      "currency_id": "BRL",
      "status": "approved",
      "date_created": null,
      "date_last_modified": null,
    },
  ],
  "feedback": - {
    "purchase": null,
    "sale": null,
  },
  "shipping": - {
    "id": 20676482441,
    "shipment_type": "shipping",
    "status": "handling",
    "date_created": "2013-05-27T10:03:28.000-04:00",
    "receiver_address": - {
      "id": 12345678,
      "address_line": "Rua dos testes 123  ",
      "zip_code": "01001000",
      "city": - {
        "id": "BR-SP-44",
        "name": "São Paulo",
      },
      "state": - {
        "id": "BR-SP",
        "name": "São Paulo",
      },
      "country": - {
        "id": "BR",
        "name": "Brasil",
      },
      "latitude": null,
      "longitude": null,
      "comment": null,
    },
    "currency_id": "BRL",
    "cost": 0,
  },
  "tags": - [
    "paid",
    "not_delivered",
  ],
}
{% endhighlight %}

##Fields {#fields}

- `id` - The order identifier.
- `status` - The actual order status. See status.
- `status.confirmed` - Initial state of an order, and it has no payment yet.
- `status.payment_required` - The order needs a payment to become confirmed and show users information.
- `status.payment_in_process` - There is a payment related with the order, but it has not accredited yet.
- `status.paid` - The order has a related payment and it has been accredited.
- `status.cancelled` - The order has not completed by some reason.
- `status_detail` - Status detail, in case the order was cancelled.
- `date_created` - Date when the order was created.
- `date_closed` - Date when the order was confirmed.
- `order_items` - An array of items included in the order.
- `order_items.item_id` - Item ID.
- `order_items.title` - Item title.
- `order_items.variation_id` - Item variation ID.
- `order_items.variation_attributes` - Variation attributes.
- `order_items.variation_attributes.id` - Attributes ID.
- `order_items.variation_attributes.name` - Attributes name.
- `order_items.variation_attributes.value_id` - Attributes value id.
- `order_items.variation_attributes.value_name` - Attributes value name.
- `order_items.quantity` - Item quantity.
- `order_items.unit_price` - Item price.
- `order_items.currency_id` - Currency ID.
- `total_amount` - Total order amount (items cost per quantity) without shipping cost.
- `currency_id` - Order currency ID.
- `buyer` - Buyer information.
- `seller` - Seller information.
- `payments` - Payments related to the order.
- `payments.transaction_amount` - Payment transaction amount.
- `payments.currency_id` - Payment currency ID.
- `payments.status` - Payment status.
- `feedback` - Feedback given by the buyer and/or seller.
- `shipping` - Shipping information.
- `shipping.status` -
- `shipping.status.pending` - Pending to be shipped, not yet paid.
- `shipping.status.handling` - Ready to be shipped. When the payment become active.
- `shipping.status.shipped` - Shipped
- `shipping.status.delivered` - Delivered. Automatic update with the shipment tracking number.
- `shipping.status.not_delivered` - Not delivered. Automatic update with the shipment tracking number.
- `shipping.status.cancelled` - Cancelled by sender or receiver.
- `tags` - List of seller selected tags, such as delivered, paid.


##Status {#status}

There are a few possible status for an order:

+ confirmed: Initial state of an order, the buyer confirmed the purchase, but is not paid yet
+ payment_required: The order needs a payment to become confirmed and to show users information.
+ payment_in_process: There is a payment related with the order, but it has not accredited yet.
+ paid: The order has a related payment and it has been accredited.
+ cancelled: The order has not completed by some reason.

##Resources {#resources}

Each order is associated with several resources:

* Items.
* Payments.
* Feedback.
* Shipping - Not available yet.

Checkout others available resources in [API Directory](/API-directory/) under Order Management.

##Searching Orders {#searchorder}

###Recent Orders

Another thing that we can do using orders api is searching for orders. Both as buyer or seller you can obtain all the orders that the user is involved. The response will include orders with less than 21 days and any order not qualified by both parties.

<pre class="terminal">
https://api.mercadolibre.com/orders/search?seller=seller_id&#038;access_token={...}
</pre>

<pre class="terminal">
https://api.mercadolibre.com/orders/search?buyer=buyer_id&#038;access_token={...}
</pre>

<br />

###Archived Orders

If you are looking for an older order, more than 21 days or qualified by both parties, you can use archived resource:

<pre class="terminal">
https://api.mercadolibre.com/orders/search/archived?seller=seller_id&#038;access_token={...}
</pre>

The same request works with buyers.


##Error Codes Reference {#error-codes}

<table class="ch-datagrid errors-code">
    <thead>
      <tr>
         <th cope="col">Error_code</th>
         <th cope="col">Error message</th>
         <th cope="col">Description</th>
         <th cope="col">Possible solution</th>
      </tr>
    </thead>
    <tbody>
      <tr>
         <td>order_not_found</td>
         <td>Order not found.</td>
         <td>$order_id incorrect.</td>
         <td>The order cannot be found, check if the order_id is correct. (<a href='#getorder'>More information</a>)</td>
      </tr>
      <tr>
         <td>empty_order_id</td>
         <td>Order ID can not be empty.</td>
         <td>$order_id is null.</td>
         <td>The parameter order_id cannot be null, check the URL used. (<a href='#getorder'>More information</a>)</td>
      </tr>
      <tr>
         <td>invalid_order_id</td>
         <td>Invalid order id.</td>
         <td>$order_id incorrect.</td>
         <td>The parameter order_id must be a integer number. (For search your orders see <a href='#searchorder'>this topic</a>)</td>
      </tr>
      <tr>
         <td>not_identified_user</td>
         <td>Can not identify the user.</td>
         <td>$seller or $buyer incorrect.</td>
         <td>The parameter $seller or $buyer must be a integer number. Probably your token does not match the seller used.</td>
      </tr>
      <tr>
         <td>not_owned_order</td>
         <td>The user has not access to the order.</td>
         <td>$seller or $buyer incorrect.</td>
         <td>To see one order, your access_token must be generated from seller or buyer.</td>
      </tr>
      <tr>
         <td>caller.id.invalid</td>
         <td>caller.id does not match buyer nor seller.</td>
         <td>$seller or $buyer incorrect.</td>
         <td>To see one order, you must be use one id from seller or buyer.</td>
      </tr>
      <tr>
         <td>forbidden_feedback</td>
         <td>The user has not access to the feedback yet.</td>
         <td>Access denied.</td>
         <td>Check if your access_token was generated from seller or buyer.</td>
      </tr>
      <tr>
         <td>feedback_not_found</td>
         <td>The feedback does not exist.</td>
         <td>Reply error.</td>
         <td>Check if feedback exist for give a reply.</td>
      </tr>
      <tr>
         <td>invalid_fulfilled</td>
         <td>'fulfilled' parameter must be true or false.</td>
         <td>Error on give feedback.</td>
         <td>Check the parameter $fulfilled this must be boolean (remove quotation marks) and check if the parameter $reason is not null in case of $fulfilled: false. </td>
      </tr>
   </tbody>
</table>
